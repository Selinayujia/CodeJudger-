{
    "title": "reverseInteger",
    "star": 3,
    "abstract": "Given a 32-bit signed integer, reverse digits of an integer",
    "text": "Approach 1: Pop and Push Digits & Check before Overflow. We can build up the reverse integer one digit at a time. While doing so, we can check beforehand whether or not appending another digit would cause overflow. Reversing an integer can be done similarly to reversing a string. \n \n We want to repeatedly 'pop' the last digit off of xx and push it to the back of the \text{rev}rev. In the end, \text{rev}rev will be the reverse of the xx.\n \n To 'pop' and 'push' digits without the help of some auxiliary stack/array, we can use math.\n \n //pop operation:\n pop = x % 10;\n x /= 10;\n \n //push operation:\n temp = rev * 10 + pop;\n rev = temp;\n \n c++\n class Solution {\n public:\n int reverse(int x) {\n int rev = 0;\n while (x != 0) {\n int pop = x % 10;\n x /= 10;\n if (rev > INT_MAX/10 || (rev == INT_MAX / 10 && pop > 7)) return 0;\n if (rev < INT_MIN/10 || (rev == INT_MIN / 10 && pop < -8)) return 0;\n rev = rev * 10 + pop;\n }\n return rev;\n }\n };\n \n java\n class Solution {\n public int reverse(int x) {\n int rev = 0;\n while (x != 0) {\n int pop = x % 10;\n x /= 10;\n if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\n if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;\n rev = rev * 10 + pop;\n }\n return rev;\n }\n }\n "
}
